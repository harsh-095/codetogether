# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 22
      uses: actions/setup-java@v4
      with:
        java-version: '22'
        distribution: 'temurin'

    - name: Build with Maven
      run: mvn clean install -DskipTests
      
    - name: Generate Javadoc
      run: mvn javadoc:javadoc
    - name: Verify build artifacts
      run: ls -l target

    - name: Upload artifact (JAR)
      uses: actions/upload-artifact@v4
      with:
        name: codetogether-jar
        path: target/*.jar
    - name: Verify ls
      run: ls

    - name: Upload artifact (Javadoc)
      uses: actions/upload-artifact@v4
      with:
        name: codetogether-javadoc
        path: target/reports/apidocs
    - name: Verify ls
      run: ls
      
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create .pem file
      run: echo "${{ secrets.AWS_KEY_PEM }}" > aws-key.pem

    - name: Set file permissions
      run: chmod 400 aws-key.pem


    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1
        
    - name: Download artifact (JAR)
      uses: actions/download-artifact@v4
      with:
        name: codetogether-jar
    - name: Download artifact (Javadoc)
      uses: actions/download-artifact@v4
      with:
        name: codetogether-javadoc
    - name: Verify ls
      run: ls

      
    - name: Transfer JAR to EC2
      run: |
        scp -o StrictHostKeyChecking=no -i aws-key.pem codetogether-0.0.1-SNAPSHOT.jar ec2-user@3.109.3.103:/home/ec2-user/
        scp -r -o StrictHostKeyChecking=no -i aws-key.pem codetogether-javadoc ec2-user@3.109.3.103:/home/ec2-user/

    - name: SSH into EC2 and restart application
      run: |
        ssh -i aws-key.pem ec2-user@3.109.3.103 << 'EOF'
        cd /home/ec2-user/
        pkill -f java || true
        nohup java -jar /home/ec2-user/codetogether-0.0.1-SNAPSHOT.jar > app.log 2>&1 &
        EOF
